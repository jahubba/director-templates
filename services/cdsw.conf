cluster {
    products {
        CDSW: 1
    }

    parcelRepositories: ${cluster.parcelRepositories} [
        "https://archive.cloudera.com/cdsw/1/parcels/1/"
    ]

    services: ${cluster.services} [CDSW]

    configs {
        CDSW {
            "cdsw.domain.config": "cdsw.cloudera.internal" # The fully qualified domain name for the CDSW host
        }
    }

    cdsw {
        count: 1
        minCount: 1

        instance: ${instances.cdsw} {
            tags {
                group: cdsw
            }

            normalizationConfig {
                mountAllUnmountedDisks: false
            }

            # These could be added to cloud specific config files but included here to keep in sync
            # Disks for gcp and azure
            bootDiskSizeGb: 100
            dataDiskCount: 2
            dataDiskSizeGb: 600
            dataDiskType: Standard

            # Disks for aws
            rootVolumeSizeGB: 100
            ebsVolumeCount : 2
            ebsVolumeSizeGiB: 600
            ebsVolumeType: gp2

            bootstrapScriptsPaths: ${instances.cdsw.bootstrapScriptsPaths} ["scripts/cdsw/cdsw-dns.sh"]  // "scripts/cdsw/cdsw-xipio.sh"

            # Add mount script inline for variable reference
            bootstrapScripts: [
"""#!/bin/bash

set -x
exec > ~/bootstrap-cdsw.log 2>&1

device=""""${blockDevice1}""""
mount="/var/lib/cdsw"

echo "Making file system"
mkfs.ext4 -F -E lazy_itable_init=1 "$device" -m 0

echo "Mounting $device on $mount"
if [ ! -e "$mount" ]; then
    mkdir -p "$mount"
fi

mount -o defaults,noatime "$device" "$mount"
echo "$device $mount ext4 defaults,noatime 0 0" >> /etc/fstab

echo "Finished app device mount"
""" ]

        }

        roles {
            HDFS: [GATEWAY]
            YARN: [GATEWAY]
            SPARK2_ON_YARN: [GATEWAY]
            CDSW: [CDSW_MASTER, CDSW_APPLICATION, CDSW_DOCKER]
        }

        configs {
            CDSW {
                CDSW_DOCKER {
                    "cdsw.docker.devices.config": ${blockDevice2} # related to the ebs configuration above
                }
            }
            
            SPARK2_ON_YARN {
                GATEWAY {
                    "spark2-conf/spark-env.sh_client_config_safety_valve": """if [ -z "${PYSPARK_PYTHON}" ]; then export PYSPARK_PYTHON=/opt/cloudera/parcels/Anaconda/bin/python; fi"""
                    "spark2-conf/spark-defaults.conf_client_config_safety_valve": "spark.lineage.enabled=false"
                }
            }
        }
    }
}